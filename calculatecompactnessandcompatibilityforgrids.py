# -*- coding: utf-8 -*-
"""calculateCompactnessAndCompatibilityforGrids.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QVzQFC0jdo9pexgvKqGcOabBmFCWnbnK
"""

from google.colab import files
uploaded = files.upload()

data = uploaded['result9.csv']
lines = data.split(b'\r\n')
n = 10

cells = []
for i in range(10):
  numbers = lines[i].split(b',')
  newRow = []
  for j in range(10):
    newRow.append(int(numbers[j]))
  cells.append(newRow)

cellList = range(1, 17)
incidenceSet = {}
for i in cellList:
  incidenceSet[i] = set()

for i in range(n):
  for j in range(n):
    if i > 0:
      incidenceSet[cells[i][j]].add(cells[i - 1][j])
    if j > 0:
      incidenceSet[cells[i][j]].add(cells[i][j - 1])
    if i < n - 1:
      incidenceSet[cells[i][j]].add(cells[i + 1][j])
    if j < n - 1:
      incidenceSet[cells[i][j]].add(cells[i][j + 1])

incidenceSet

desiredTopoStructure = [[12,15],
[10],
[7,8],
[8,14],
[5,16,6],
[5,10,11],
[3,15],
[3,4],
[14,16],
[2,6],
[6],
[1,15],
[5],
[4,9,16],
[1,7,12],
[5,9,14]]

dictDesiredTopo = {}
for i in cellList:
  dictDesiredTopo[i] = set(desiredTopoStructure[i - 1])

compatibility = 0.0
for i in cellList:
  compatibility = compatibility + float(len(incidenceSet[i] & dictDesiredTopo[i])) / len(dictDesiredTopo[i])
compatibility

area = {}
boundary = {}
width = 5.09581
length = 8.66623

for i in cellList:
  area[i] = 0.0
  boundary[i] = 0.0

for i in range(n):
  for j in range(n):
    area[cells[i][j]] = area[cells[i][j]] +  width * length
    if i == 0 or cells[i - 1][j] != cells[i][j]: 
      boundary[cells[i][j]] += length
    if(i == n - 1 or cells[i + 1][j] != cells [i][j]): 
      boundary[cells[i][j]] += length
    if(j == 0 or cells[i][j - 1] != cells[i][j]): 
      boundary[cells[i][j]] += width
    if(j == n - 1 or cells[i][j + 1] != cells[i][j]):
       boundary[cells[i][j]] += width

area, boundary

import math
compactness = 0.0
for i in cellList:
  compactness = compactness + 4.0 * math.pi * area[i] / boundary[i] / boundary[i]
compactness

